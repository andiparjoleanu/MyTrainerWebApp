<div class="exercise d-flex flex-column flex-md-row flex-md-wrap justify-content-center justify-content-lg-between align-items-center">
    <div class="d-flex flex-column justify-content-center mt-2 mb-2 ml-4 mr-4">
        <button id="tryBaseSet" type="button" class="btn proLogout">Exersează cu setul de bază</button>
    </div>
    <div class="d-flex flex-column justify-content-center mt-2 mb-2 ml-4 mr-4">
        <button id="trainButton" type="button" class="btn proLogout">Adaugă exerciții noi</button>
    </div>
    <div class="d-flex flex-column align-items-center justify-content-center mr-4 ml-4">
        <p class="exerciseType">sau</p>
        <div>
            <input type="file" id="inputFile" accept=".json">
            <label id="inputFileLabel" class="custom-file-button" for="inputFile"><i class="fa fa-upload mr-3" aria-hidden="true"></i><span id="fileName">Încarcă date</span></label>
        </div>
    </div>
</div>
<script>
    document.getElementById("trainButton").addEventListener("click", startTraining);
    document.getElementById("tryBaseSet").addEventListener("click", tryingBaseSet);
</script>

<script>
    var inputFile = document.getElementById("inputFile");
    inputFile.onchange = function () {
        document.getElementById("trainButton").disabled = true;
        document.getElementById("tryBaseSet").disabled = true;
        document.getElementById("inputFile").disabled = true;
        let file = inputFile.files[0];

        document.getElementById("fileName").innerText = file.name;
        let reader = new FileReader();
        reader.readAsText(file);

        reader.onloadend = function (event) {
            let text = event.target.result;
            let textContent = {
                Content: text
            };
            $.post("Home/WriteInputFile", textContent).done(function () {
                try {
                    neuralNetwork.loadData("../model/auxiliar.json", loadInputFileFinished);
                }
                catch (error) {
                    console.log(error);
                }

            });
        };

        reader.onerror = function () {
            console.log(reader.error);
        };
    };

    function loadInputFileFinished() {
        neuralNetwork.normalizeData();
        neuralNetwork.train(trainingOptions, finishedTrainingInput);
    }

    function finishedTrainingInput() {
        isTrained = true;
        classifying = true;
        $.get("/Home/ClassifierCounter", function (response) {
            $("#noteContent").html(response);
            classifyExercises();
        });
    }
</script>